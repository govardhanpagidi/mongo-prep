Retryable Writes
------------------
	- Retryable writes allow MongoDB drivers to automatically retry certain write operations a single time if they encounter network errors, or if they cannot find a healthy primary in the replica sets or sharded cluster.
	- Do not support standalone instances. Requires a replica set or sharded cluster.
	- Requires storage engine supporting document-level locking such as WiredTiger or In-Memory storage engines.
	- Clients require MongoDB drivers for 3.6 or greater.
	- MongoDB version of every node in cluster must be 3.6 or greater inclduing FCV (feature compatibility version)
	- Enabled by default from the official MongoDB 4.2-series drivers
	- Write operations issued with a Write Concern of 0 are not retryable.
	- Transaction Commit & Abort Operations are retryable. If transaction commit or abort operation encounters an error, MongoDB drivers retry the operation a single time regardless of retryWrites is set to false.
	- Write operations inside transactions are not individually retryable, regardless of value of retryWrites.
	- MongoDB retryable writes make only one retry attempt. This helps address transient network errors and replica set elections, but not persistent network errors.
	- If the driver cannot find a healthy primary in the destination replica set or sharded cluster shard, the drivers wait serverSelectionTimeoutMS milliseconds to determine the new primary before retrying. Retryable writes do not address instances where the failover period exceeds serverSelectionTimeoutMS.
	- If the client application becomes temporarily unresponsive for more than the localLogicalSessionTimeoutMinutes after issuing a write operation, there is a chance that when the client applications starts responding (without a restart), the write operation may be retried and applied again.
	- MongoShell supports retryable writes. To enable use "mongo --retryWrites" command line option.

Duplicate Key Errors on Upsert
---------------------------------
MongoDB 4.2 will retry single-document upsert operations (i.e upsert : true and multi : false) that fail due to a duplicate key error only if the operation meets all of the following conditions:

	- The target collection has a unique index that caused the duplicate key error.
	- The update match condition is either:
		A single equality predicate { "fieldA" : "valueA" },
		or
		a logical AND of equality predicates { "fieldA" : "valueA", "fieldB" : "valueB" }

	- The set of fields in the unique index key pattern matches the set of fields in the update query predicate.
	- The update operation does not modify any of the fields in the query predicate.


Retryable Reads
----------------
	- Retryable reads allow MongoDB drivers to automatically retry certain read operations a single time if they encounter certain network or server errors.
	- Minimum Driver version - Official MongoDB drivers compatible with MongoDB Server 4.2 and later.
	- Miniumum Server Version - Drivers connected to MongoDB Server 3.6 or later.
	- Enabled by default from in drivers compatible with MongoDBserver 4.2 and later.
	- Mongoshell does not support retryable reads.
	- Unsupported read operations - mapReduce(), getMore, any read command passed to a generic Database.runCommand helper, which is agnostic about write or read commands.
	- MongoDB retryable reads make only one retry attempt. This helps address transient network errors or replica set elections, but not persistent network errors.
	- The driver performs server selection using the read command's original read preference before retrying the read operation. If the driver cannot select a server for the retry attempt using the original read preference, the driver returns the original error.
	- The drivers wait serverSelectionTimeoutMS milliseconds before performing server selection. Retryable reads do not address instances where no eligible servers exist after waiting serverSelectionTimeoutMS.

