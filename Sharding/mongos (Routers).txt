MongoDB mongos instances route queries and write operations to shards in a sharded cluster. 

mongos provide the only interface to a sharded cluster from the perspective of applications. Applications never connect or communicate directly with the shards.

The mongos tracks what data is on which shard by caching the metadata from the config servers. The mongos uses the metadata to route operations from applications and clients to the mongod instances. A mongos has no persistent state and consumes minimal system resources.

The most common practice is to run mongos instances on the same systems as your application servers, but you can maintain mongos instances on the shards or on other dedicated resources.

Routing and Result Process
----------------------------
mongos routes a query by
	- Determining the list of shards that must receive the query
	- Establishing a cursor on all targeted shards

mongos then merges the data from each shard. certain query modifiers such as sorting are performed on each shards before mongs returns the results.

For aggregation operations that run on multiple shards, if the operations do not require running on the database's primary shard, these operations may route the results back to the mongos where the results are then merged.

2 cases in which a pipeline is ineligible to run on mongos:
	- when the merge needs to happen on primary. For example, $lookup requiring access to unsharded collection in the same database.
	- when the merge part of the pipeline may need to write to temporary data to disk, such as $group with allowDiskUse: true. In this case, assuming there are no other stagees requiring the merge to happen on primary shard, the merge will run on a randomly selected shard.

explain: true with aggregation on sharded cluster query will return 3 json objects:
	- mergeType - where the merge happens - primaryShard or anyShard or mongos
	- splitPipeline - shows which operations in your pipeline have run on individual shards.
	- shards - shows the work each shard has done.

When shard key or prefix is included in the query, mongos performs targeted operations routing queries to specific shards. for others, queries are routed to all shards in the cluster. Some queries that do include shard key may still result in broadcast operation depending on the distribution of data in the cluster and selectivity of the query.

How mongos handles query modifiers
------------------------------------
sorting - If the result of the query is not sorted, the mongos instance opens a result cursor that "round robins" results from all cursors on the shards.

limits - mongos instance passes that limit to the shards and then re-applies the limit to the result before returning the result to the client.

skip -  mongos cannot pass the skip to the shards, but rather retrieves unskipped results from the shards and skips the appropriate number of documents when assembling the complete result.

When skip is used in conjunction with a limit(), the mongos will pass the limit plus the value of the skip to the shards to improve the efficiency of these operations.

Read Prefernce and Shards - mongos applies read preference when reading from the shards. member selected is based on both read preference and replication.localPingThresholdMs settings.

replication.localPingThresholdMs - Defaults to 15 ms. ping time in ms that mongos uses to select the secondary.

Hedged Reads
--------------
mongos supports hedged reads for non-primary read preferences. Read preference nearest enables the hedged read option by default.

maxTimeMSForHedgedReads - Default 150ms. max timeout limit for hedged reads.
db.adminCommand( { setParameter: 1, maxTimeMSForHedgedReads: 200 } )

readHedgingMode - Default is "on". To turn off hedged read support, change to "off"
db.adminCommand( { setParameter: 1, readHedgingMode: "off" } ) 

Confirm Connection to mongos
--------------------------------
hello command returns a msg field with value "isdbgrid" for mongos.

Targeted vs Broadcast Operations
-----------------------------------
Mutil-update operations are always broadcast operations.

updateMany() and deleteMany() methods are broadcast operations, unless the query document specifies the shard key in full.

insertOne() operations target to one shard. Each document in insertMany() array targets to a single shard, but there is no guarantee all documents in the array insert to a single shard.

updateOne(), replaceOne() and deleteOne() operations must include the shard key or _id in the query document. MongoDB returns error if these methods are used without the shard key or _id.

Depending on the distribution of data in the cluster and the selectivity of the query, mongos may still perform a broadcast operation to fulfill these queries.

Index Use
-------------
For Scatter Gather queries, each shard will use either the shard key index or another more efficient to fulfill the query.

If the query includes multiple sub-expressions that reference the fields indexed by the shard key and the secondary index, the mongos can route the queries to a specific shard and the shard will use the index that will allow it to fulfill most efficiently.

Metadata Operations
----------------------
mongos uses majority write concern for these operations that affect the cluster metadata- 
	- addShard, create, drop, dropDatabase, enableSharding, movePrimary, renameCollection, shardCollection, removeShard, setFeatureCompatibilityVersion.

FCV Compatibility - Starting in MongoDB 4.0, the mongos will crash when attempting to connect to mongod instances with greater FCV.

Connection Pools - ShardingTaskExecutorPoolReplicaSetMatching - Min size of mongod/mongs instance's connection pool size to each member. Default is automatic.
Allowed values are:
	- automatic - for mongos, same as matchPrimaryNode. For mongod, same as disabled.
	- matchPrimaryNode - equal to size of replica set's primary
	- matchBusiestNode - equal to largest among the active connection counts
	- disabled - equal to ShardingTaskExecutorPoolMinSize

ShardingTaskExecutorPoolMinSize - Default is 1.